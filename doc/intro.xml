<!-- ------------------------------------------------------------------- -->
<!--                                                                     -->
<!--  intro.xml           IdRel documentation             Chris Wensley  -->
<!--                                                    & Anne Heyworth  -->
<!--                                                                     -->
<!-- ------------------------------------------------------------------- -->

<?xml version="1.0" encoding="UTF-8"?>

<Chapter Label="intro">
<Heading>Introduction</Heading>

This manual describes the &idrel; package for &GAP; 4.7 
for computing the identities among relators of a group presentation 
using rewriting, logged rewriting, monoid polynomials, module polynomials 
and <M>Y</M>-sequences.
<P/>
The theoretical background for these computations is contained in 
Brown and Huebschumann <Cite Key="BrHu" />, 
Brown and Razak Salleh <Cite Key="BrSa" /> and is surveyed in 
the first author's thesis <Cite Key="anne-thesis" />.
<P/>
&idrel; is primarily designed for the computation of a minimal set 
of generators for the module of identities among relators. 
It also contains functions which compute logged rewrite systems 
for group presentations (and complete them where possible); 
functions for operations involving elements of monoid rings; 
and functions for operations with elements of right modules over 
monoid rings.
The <M>Y</M>-sequences are used as a <E>rewriting</E> way of representing 
elements of a free crossed module 
(products of conjugates of group relators and inverse relators).
The package is written entirely in &GAP;4, and requires no compilation.
<P/>
The package is loaded into &GAP; with the <C>LoadPackage</C> command, 
and on-line help is available in the usual way.
<Example>
<![CDATA[
gap> LoadPackage( "idrel" ); 
gap> ?idrel
]]>
</Example>

A pdf version of the &idrel; manual is available 
in the <F>doc</F> directory of the home directory of &idrel;.

The information parameter <C>InfoIdRel</C> has default value <C>0</C>.
When raised to a higher value, additional information is printed out.

&idrel; was originally developed in 1999 using &GAP;3, 
partially supported by a University of Wales Research Assistantship 
for the first author, Anne Heyworth.
<P/>
If you use &idrel; to solve a problem then please send a short email to 
the second author, to whom bug reports, suggestions and other comments 
should also be sent. 
You may reference the package by mentioning <Cite Key="HeWe1" />
and <Cite Key="anne-thesis" />.
<P/>
The current version is &IDRELVERSION; for &GAP; 4.8, 
released on &IDRELLONGRELEASEDATE;. 
<P/> 
The package may be obtained as a compressed tar file 
<File>&IDRELTARFILENAME;</File>
by ftp from one of the following sites: 
<List>
<Item>
any &GAP; archive, e.g. 
<URL>http://www.gap-system.org/Packages/packages.html</URL>; 
</Item>
<Item>
the package GitHub repository: 
<URL>https://gap-packages.github.io/idrel</URL>. 
</Item>
</List>
<P/>


<Section><Heading>An illustrative example</Heading>

A typical input for &idrel; is an fp-group presentation. 
This requires a free group <C>F</C> on a set of generators 
and a set of relators <C>R</C> (words in the free group). 
The module of identities among relators for this presentation 
has as its elements the Peiffer equivalence classes of all products of 
conjugates of relators which represent the identity in the free group.
<P/> 
In this package the identities among relators are represented by Y-sequences, 
which are lists <M>[[r_1, u_1],\ldots,[r_k,u_k]]</M> 
where <M>r_1,\ldots,r_k</M> are the group relators or their inverses, 
and <M>u_1,\ldots,u_k</M> are words in the free group <C>F</C>. 
A Y-sequence is evaluated in <C>F</C> as the product 
<M>(u_1^{-1}r_1u_1)\ldots(u_k^{-1}r_ku_k)</M> 
and is an identity Y-sequence if it evaluates to the identity in <C>F</C>. 
An identity Y-sequence represents an identity among the relators 
of the group presentation. 
The main function of the package is to produce a set of Y-sequences 
which generate the module of identites among relators, and further, 
that this set be minimal in the sense that every element in it 
is needed to generate the module.
<P/>
Before starting on the main example, 
we consider a simpler example illustrating the use of &idrel;. 
All the functions used are described in detail in this manual.
We compute a reduced set of identities among relators 
for the presentation of the symmetric group <C>s3</C> 
with generators <M>a,b</M> and relators <M>[a^3 , b^2, (ab)^2]</M>. 
In the listings below, <C>s3_M1</C> is the first monoid generator 
for <C>s3</C>, <C>s3_R2</C> is the second relator, 
while <C>s3_Y4</C> is the fourth Y-sequence for <C>s3</C>. 
<P/>
<Example>
<![CDATA[
gap> F := FreeGroup( 2 );;
gap> a := F.l;; b:= F.2;;
gap> rels3 := [ a^3 , b^2, a*b*a*b];
[ f1^3, f2^2, (f1*f2)^2 ]
gap> s3 := F/rels3;
<fp group on the generators [ fl, f2 ]> 
gap> SetName( s3, "s3" ); 
gap> idy3 := IdentityYSequences( s3 );; 
gap> Length( idy3 ); 
12
gap> Y1 := idy3[1];
[ 1, 4, [ [ s3_R1^-1, f1^-1 ], [ s3_R1, <identity ...> ] ] ]
gap> Y3 := idy3[3];
[ 3, 8, [ [ s3_R2^-1, f2^-1 ], [ s3_R2, <identity ...> ] ] ]
gap> Y5 := idy3[5];
[ 5, 9, [ [ s3_R3^-1, f2^-1 ], [ s3_R3, f1 ] ] ]
gap> Y11 := idy3[11];
[ 11, 6, [ [ s3_R3^-1, f1^-1 ], [ s3_R1, <identity ...> ], [ s3_R3^-1, f1 ], 
      [ s3_R2, f1^-1*f2^-1 ], [ s3_R1, f2^-1 ], [ s3_R3^-1, f1*f2^-1 ], 
      [ s3_R2, <identity ...> ], [ s3_R2, f1^-1 ] ] ]
]]>
</Example>

Of the <M>18</M> Y-sequences formed, <M>6</M> are empty, and discarded, 
so that <C>idy3</C> has <M>12</M> entries, and the list is then sorted. 
<C>Y1</C> is the <E>root identity</E> <C>((a^3)^-1)^(a^-1).(a^3)</C>. 
If we write <M>r=a^3</M>, <M>s=b^2</M>, <M>t=(ab)^2</M> 
then <C>Y1</C> becomes <M>(r^{-1})^{a^{-1}}r</M>. 
Similarly, <C>Y3</C> is the second root identity <M>(s^{-1})^{b^{-1}}s</M>. 
The third root identity is <M>(t^{-1})^{(ab)^{-1}}t</M>, 
which is equivalent to  <M>(t^{-1})^{b^{-1}}t^a</M>, 
and is the sequence <C>Y5</C>.
The identity <C>Y11</C>, which is not a root identity, 
is obtained by walking around the Schreier diagram of the presentation, 
a somewhat truncated triangular prism. 
Taking the appropriate conjugate of each face in turn, we get: 
<C>
Y11=(t^-1)^(a^-1).r.(t^-1)^a.s^(a^-1b^-1).r^(b^-1).(t^-1)^(ab^-1).s.s^(a^-1). 
</C> 
These four identities generate the module of identities for <C>s3</C>.  
<P/>
In order to form the <E>module of identities</E> for <C>s3</C> 
the identities are transformed into module polynomials. 
Thus <C>Y1</C> <M>= (r^{-1})^{a^{-1}}r</M> becomes 
<M>y_1 = (-r)(a^{-1})+r = r(1-a^{-1})</M> and 
<M>y_1a = r(a-1)</M>. 
Similarly <C>Y3</C> <M> = (s^{-1})^{b^{-1}}s</M> yields <M>y_3b = s(b-1)</M> 
and <C>Y5</C> <M>= (t^{-1})^{b^{-1}}t^a</M> yields <M>y_5ba = t(b-a)</M>. 
<P/>
<Example>
<![CDATA[
gap> idrels3 := IdentitiesAmongRelators( s3 );;
gap> Display( idrels3[1] );
[ ( s3_Y1*( s3_M1), s3_R1*( s3_M1 - <identity ...>) ), 
  ( s3_Y3*( s3_M2), s3_R2*( s3_M2 - <identity ...>) ), 
  ( s3_Y5*( s3_M2*s3_M1), s3_R3*( s3_M2 - s3_M1) ), 
  ( s3_Y11*( -s3_M1), s3_R1*( -s3_M2*s3_M1 - s3_M1) + s3_R2*( -s3_M1*s3_M2 - s\
3_M1 - <identity ...>) + s3_R3*( s3_M3 + s3_M2 + <identity ...>) ) ]
]]>
</Example>

Further examples are given in section <Ref Sect="sect-idrels"/>. 

</Section>

</Chapter>
