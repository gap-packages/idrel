<!-- ------------------------------------------------------------------- -->
<!--                                                                     -->
<!--  rws.xml             IdRel documentation             Chris Wensley  -->
<!--                                                    & Anne Heyworth  -->
<!-- ------------------------------------------------------------------- -->

<?xml version="1.0" encoding="UTF-8"?>

<Chapter Label="chap-rws">
<Heading>Rewriting Systems</Heading>

This chapter describes functions to construct rewriting systems 
for finitely presented groups which store rewriting information.
The main example used is a presentation of the quaternion group <C>q8</C> 
with generators <M>a,b</M> 
and relators <M>[a^4, b^4, abab^{-1}, a^2b^2]</M>.


<Section><Heading>Monoid Presentations of FpGroups</Heading>

<ManSection>
   <Attr Name="FreeRelatorGroup"
         Arg="grp" />
   <Attr Name="FreeRelatorHomomorphism"
         Arg="grp" />
<Description>
The function <C>FreeRelatorGroup</C> returns a free group 
on the set of relators of the given fp-group <C>G</C>. 
If <C>HasName(G)</C> is <C>true</C> then a name is automatically assigned 
to the free group.
<P/>
The function <C>FreeRelatorHomomorphism</C> returns the group homomorphism 
from the free group on the relators 
to the free group on the generators of <C>G</C>, 
mapping each generator to the corresponding word.
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> F := FreeGroup( 2 );;
gap> a := F.1;; b:= F.2;;
gap> rels := [ a^4, b^4, a*b*a*b^-1, a^2*b^2];;
gap> q8 := F/rels;;
gap> SetName( q8, "q8" );
gap> frq8 := FreeRelatorGroup( q8 );
q8_R 
gap> GeneratorsOfGroup( frq8 );
[ q8_R1, q8_R2, q8_R3, q8_R4]
gap> frhomq8 := FreeRelatorHomomorphism( q8 );
[ q8_R1, q8_R2, q8_R3, q8_R4] -> [ f1^4, f2^4, f1*f2*f1*f2^-1, f1^2*f2^2]
]]>
</Example>

<ManSection>
   <Attr Name="MonoidPresentationFpGroup"
         Arg="grp" />
   <Attr Name="ArrangementOfMonoidGenerators"
         Arg="grp" />
   <Attr Name="FreeGroupOfPresentation"
         Arg="mon" />
   <Attr Name="GroupRelatorsOfPresentation"
         Arg="mon" />
   <Attr Name="InverseRelatorsOfPresentation"
         Arg="mon" />
   <Attr Name="HomomorphismOfPresentation"
         Arg="mon" />
<Description>
A monoid presentation for a finitely presented group <C>G</C> 
has two monoid generators <M>g^+,g^-</M> for each group generator <M>g</M>. 
The relators of the monoid presentation comprise the group relators, 
and relators <M>g^+g^-</M> specifying the inverses. 
The function <C>MonoidPresentationFpGroup</C> returns the monoid presentation 
derived in this way from an fp-presentation. 
<P/> 
The function <C>FreeGroupOfPresentation</C> 
returns the free group on the monoid generators.
<P/>
The function <C>GroupRelatorsOfPresentation</C> returns those relators 
of the monoid which correspond to the relators of the group. 
All negative powers in the group relators are converted to positive powers 
of the <M>g^-</M>.
The function <C>InverseRelatorsOfPresentation</C> returns relators 
which specify the inverse pairs of the monoid generators.
<P/>
The function <C>HomomorphismOfPresentation</C> returns the homomorphism 
from the free group of the monoid presentation to the free group 
of the group presentation.
<P/>
The attribute <C>ArrangementOfMonoidGenerators</C> will be discussed 
before the second example in the next section.
<P/>
In the example below, the four monoid generators <M>a^+, b^+, a^-, b^-</M> 
are named <C>q8_M1, q8_M2, q8_M3, q8_M4</C> respectively. 
</Description>
</ManSection>
<Example>
<![CDATA[
gap> mon := MonoidPresentationFpGroup( q8 );
monoid presentation with group relators 
[ q8_M1^4, q8_M2^4, q8_M1*q8_M2*q8_M1*q8_M4, q8_M1^2*q8_M2^2 ]
gap> fgmon := FreeGroupOfPresentation( mon ); 
<free group on the generators [ q8_M1, q8_M2, q8_M3, q8_M4 ]>
gap> genfgmon := GeneratorsOfGroup( fgmon );;
gap> gprels := GroupRelatorsOfPresentation( mon ); 
[ q8_M1^4, q8_M2^4, q8_M1*q8_M2*q8_M1*q8_M4, q8_M1^2*q8_M2^2 ]
gap> invrels := InverseRelatorsOfPresentation( mon ); 
[ q8_M1*q8_M3, q8_M2*q8_M4, q8_M3*q8_M1, q8_M4*q8_M2 ]
gap> hompres := HomomorphismOfPresentation( mon ); 
[ q8_M1, q8_M2, q8_M3, q8_M4 ] -> [ f1, f2, f1^-1, f2^-1 ]
]]>
</Example>
</Section>


<Section><Heading>Rewriting systems for FpGroups</Heading>

These functions duplicate the standard Knuth Bendix functions 
which are available in the &GAP; library. 
There are two reasons for this: 
(1) these functions were first written before the standard functions 
were available;
(2) we require logged versions of the functions, and these are most 
conveniently extended versions of the non-logged code.

<ManSection Label="rwsfp">
   <Attr Name="RewritingSystemFpGroup"
         Arg="grp" />
<Description>
This function attempts to return a complete rewrite system 
for the group <C>G</C> obtained from the monoid presentation <C>mon</C>, 
with a length-lexicographical ordering on the words in <C>fgmon</C>, 
by applying Knuth-Bendix completion. 
Such a rewrite system can be obtained for all finite groups. 
The rewrite rules are (partially) ordered, starting with the inverse relators, 
followed by the rules which reduce the word length the most.
<P/>
In our <C>q8</C> example there are 16 rewrite rules 
in the rewriting system <C>rws</C>:  
<Table Align="|c|">
  <HorLine/>
  <Row> 
    <Item> <M>a^+a^- \to \rm{id}, \quad 
              b^+b^- \to \rm{id}, \quad 
              a^-a^+ \to \rm{id}, \quad
	      b^-b^+ \to \rm{id}, </M>  
    </Item>
  </Row>
  <Row>
    <Item> <M>a^{+2}b^- \to b^+, \quad 
              a^{+2}b^+ \to b^-, \quad 
              a^{+3} \to a^-, \quad
              b^{-2} \to a^{+2}, \quad 
              b^-a^- \to a^+b^-, \quad 
              b^-a^+ \to a^+b^+, </M> 
    </Item>
  </Row>
  <Row>
    <Item> <M>a^-b^- \to a^+b^+, \quad 
              a^{-2} \to a^{+2}, \quad 
              a^-b^+ \to a^+b^-, \quad 
              b^+a^- \to a^+b^+, \quad 
              b^{+2} \to a^{+2}, \quad 
              b^+a^+ \to a^+b^-. </M>
    </Item>
  </Row>
  <HorLine/>
</Table>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> rws := RewritingSystemFpGroup( q8 );
[ [q8_Ml*q8_M3, <identity ...>], [ q8_M2*q8_M4, <identity ...> ], 
  [q8_M3*q8_Ml, <identity ...>], [ q8_M4*q8_M2, <identity ...> ], 
  [q8_M1^2*q8_M4, q8_M2], [q8_Ml^2*q8_M2, q8_M4], [ q8_Ml^3, q8_M3 ], 
  [ q8_M4^2, q8_Ml^2], [ q8_M4*q8_M3, q8_Ml*q8_M4], 
  [ q8_M4*q8_Ml, q8_Ml*q8_M2], [q8_M3*q8_M4, q8_Ml*q8_M2], 
  [ q8_M3^2, q8_Ml^2], [q8_M3*q8_M2, q8_Ml*q8_M4], 
  [ q8_M2*q8_M3, q8_Ml*q8_M2], [q8_M2^2, q8_Ml^2], 
  [ q8_M2*q8_Ml, q8_Ml*q8_M4] ]
]]>
</Example>

The default ordering of the <M>2n</M> monoid generators is 
<M> [g_1^+,g_2^+,\ldots,g_n^+,g_1^-,g_2^-,\ldots,g_n^-] </M>. 
In the case of the two-generator abelian group 
<M>T = \langle a,b ~|~ [a,b] \rangle</M> 
the Knuth-Bendix process starts to generate infinite sets of relations 
such as <M>\{ab^ma^{-1} \to b^m,~ m \geqslant 1\}</M>. 
If, using the <C>ArrangementOfMonoidGenerators</C> function, 
we specify the alternative ordering 
<M> [g_1^+,g_1^-,g_2^+,g_2^-] </M>, 
then a finite set of rules is obtained.  
<P/>
<Example>
<![CDATA[
gap> F := FreeGroup(2);;                  
gap> T := F/[Comm(a,b)];              
<fp group of size infinity on the generators [ f1, f2 ]>
gap> SetName( T, "T" );                   
gap> SetArrangementOfMonoidGenerators( T, [1,-1,2,-2] );
gap> monT := MonoidPresentationFpGroup(T);              
monoid presentation with group relators [ T_M2*T_M4*T_M1*T_M3 ]
gap> rwsT := RewritingSystemFpGroup( T );               
[ [ T_M1*T_M2, <identity ...> ], [ T_M2*T_M1, <identity ...> ], 
  [ T_M3*T_M4, <identity ...> ], [ T_M4*T_M3, <identity ...> ], 
  [ T_M4*T_M2, T_M2*T_M4 ], [ T_M4*T_M1, T_M1*T_M4 ], 
  [ T_M3*T_M2, T_M2*T_M3 ], [ T_M3*T_M1, T_M1*T_M3 ] ]
]]>
</Example>
The eight rules can be written as follows, 
showing that the <M>a^{\pm}</M> and <M>b^{\pm}</M> commute:  
<Table Align="|c|">
  <HorLine/>
  <Row> 
    <Item> <M>a^+a^- \to \rm{id}, \quad\quad
              a^-a^+ \to \rm{id}, \quad\quad
              b^+b^- \to \rm{id}, \quad\quad
	      b^-b^+ \to \rm{id}, </M>  
    </Item>
  </Row>
  <Row>
    <Item> <M>b^-a^- \to a^-b^-, \quad 
              b^-a^+ \to a^+b^-, \quad 
              b^+a^- \to a^-b^+, \quad 
              b^+a^+ \to a^+b^+. </M>
    </Item>
  </Row>
  <HorLine/>
</Table>

<P/>
The functions called by <C>RewritingSystemFpGroup</C> are as follows.

<ManSection Label="one-pass-reduce">
   <Oper Name="OnePassReduceWord"
         Arg="word, rules" />
   <Oper Name="ReduceWordKB"
         Arg="word, rules" />
<Description>
Assuming that <C>word</C> is an element of a free monoid 
and <C>rules</C> is a list of ordered pairs of such words, 
the function <C>OnePassReduceWord</C> searches the list of rules 
until it finds that the left-hand side of a <C>rule</C> 
is a <C>subword</C> of <C>word</C>, 
whereupon it replaces that <C>subword</C> with the right-hand side 
of the matching rule. 
The search is continued from the next <C>rule</C> in <C>rules</C>, 
but using the new <C>word</C>.
When the end of <C>rules</C> is reached, 
one pass is considered to have been made
and the reduced <C>word</C> is returned. 
If no matches are found then the original <C>word</C> is returned.
<P/>
The function <C>ReduceWordKB</C> repeatedly applies the function 
<C>OnePassReduceWord</C> 
until the <C>word</C> remaining contains no left-hand side of a <C>rule</C> 
as a <C>subword</C>. 
If <C>rules</C> is a complete rewrite system, 
then the irreducible <C>word</C> that is returned is unique, 
otherwise the order of the rules in <C>rules</C> will determine 
which irreducible word is returned.
In the example we see that <M>b^9a^9</M> reduces to <M>ba</M> 
which is not a normal form as we have seen in <Ref Sect="rwsfp"/>,
where <M>b^+a^+ \to a^+b^-</M> is the last rule. 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> monrels := Concatenation( gprels, invrels ); 
[ q8_M1^4, q8_M2^4, q8_M1*q8_M2*q8_M1*q8_M4, q8_M1^2*q8_M2^2, q8_M1*q8_M3, 
  q8_M2*q8_M4, q8_M3*q8_M1, q8_M4*q8_M2 ]
gap> id := One( monrels[1] );;
gap> r0 := List( monrels, r -> [ r, id ] ); 
[ [ q8_M1^4, <identity ...> ], [ q8_M2^4, <identity ...> ], 
  [ q8_M1*q8_M2*q8_M1*q8_M4, <identity ...> ], 
  [ q8_M1^2*q8_M2^2, <identity ...> ], [ q8_M1*q8_M3, <identity ...> ], 
  [ q8_M2*q8_M4, <identity ...> ], [ q8_M3*q8_M1, <identity ...> ], 
  [ q8_M4*q8_M2, <identity ...> ] ]
gap> ap := genfgmon[1];;
gap> bp := genfgmon[2];;
gap> am := genfgmon[3];;
gap> bm := genfgmon[4];;
gap> w0 := bp^9 * ap^9; 
q8_M2^9*q8_M1^9
gap> w1 := OnePassReduceWord( w0, r0 ); 
q8_M2^5*q8_M1^5
gap> w2 := ReduceWordKB( w0, r0 ); 
q8_M2*q8_M1
]]>
</Example>



<ManSection Label="one-pass-KB">
   <Oper Name="OnePassKB"
         Arg="rules" />
   <Oper Name="RewriteReduce"
         Arg="rules" />
   <Oper Name="KnuthBendix"
         Arg="rules" />
   <Oper Name="ShorterRule"
         Arg="rule1, rule2" />
<Description>
The function <C>OnePassKB</C> implements the main loop of the Knuth-Bendix 
completion algorithm. 
Rules are compared with each other; all critical pairs are calculated; 
and the irreducible critical pairs are orientated with respect 
to the length-lexicographical ordering and added to the rewrite system.
<P/>
The function <C>RewriteReduce</C> will remove unnecessary rules from 
a rewrite system. 
A rule is deemed to be unnecessary if it is implied by the other rules, 
i.e. if both sides can be reduced to the same thing by the remaining rules.
<P/>
The function <C>KnuthBendix</C> implements the Knuth-Bendix algorithm, 
attempting to complete a rewrite system with respect to 
a length-lexicographic ordering. 
It calls first <C>OnePassKB</C>, which adds rules, and then (for efficiency) 
<C>RewriteReduce</C> which removes any unnecessary ones. 
This procedure is repeated until <C>OnePassKB</C> adds no more rules. 
It will not always terminate, but for many examples (all finite groups) 
it will be successful. 
The rewrite system returned is complete, that is: 
it will rewrite any given word in the free monoid to a unique irreducible; 
there is one irreducible for each element of the quotient monoid; 
and any two elements of the free monoid which are in the same class 
will rewrite to the same irreducible.
<P/>
The function <C>ShorterRule</C> gives an ordering on rules. 
Rules <M>(g_lg_2,id)</M> that identify two generators 
(or one generator with the inverse of another) come first in the ordering. 
Otherwise one precedes another if it reduces the length of a word 
by a greater amount. 
<P/>
One pass of this procedure for our <C>q8</C> example 
adds 13 relators to the original 8, and these 21 are then reduced to 9. 
A second pass and reduction gives the list of 16 rules seen above,  
forming a complete rewrite system for the group. 
Now <M>b^9a^9</M> correctly reduces to <M>ab^{-1}</M>. 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> r1 := OnePassKB( r0 );
[ [ q8_M1^4, <identity ...> ], [ q8_M2^4, <identity ...> ], 
  [ q8_M1*q8_M2*q8_M1*q8_M4, <identity ...> ], 
  [ q8_M1^2*q8_M2^2, <identity ...> ], [ q8_M1*q8_M3, <identity ...> ], 
  [ q8_M2*q8_M4, <identity ...> ], [ q8_M3*q8_M1, <identity ...> ], 
  [ q8_M4*q8_M2, <identity ...> ], [ q8_M2*q8_M1*q8_M4, q8_M1^3 ], 
  [ q8_M1*q8_M2^2, q8_M1^3 ], [ q8_M2^2, q8_M1^2 ], [ q8_M1^3, q8_M3 ], 
  [ q8_M2^3, q8_M4 ], [ q8_M1*q8_M2*q8_M1, q8_M2 ], 
  [ q8_M2^3, q8_M1^2*q8_M2 ], [ q8_M2^2, q8_M1^2 ], [ q8_M1^2*q8_M2, q8_M4 ], 
  [ q8_M1^3, q8_M3 ], [ q8_M2*q8_M1*q8_M4, q8_M3 ], [ q8_M1*q8_M2^2, q8_M3 ], 
  [ q8_M2^3, q8_M4 ] ]
gap> Length( r1 );
21
gap> r1 := RewriteReduce( r1 ); 
[ [ q8_M1*q8_M3, <identity ...> ], [ q8_M2^2, q8_M1^2 ], 
  [ q8_M2*q8_M4, <identity ...> ], [ q8_M3*q8_M1, <identity ...> ], 
  [ q8_M4*q8_M2, <identity ...> ], [ q8_M1^3, q8_M3 ], 
  [ q8_M1^2*q8_M2, q8_M4 ], [ q8_M1*q8_M2*q8_M1, q8_M2 ], 
  [ q8_M2*q8_M1*q8_M4, q8_M3 ] ]
gap> Length( r1 );
9
gap> r2 := KnuthBendix( r1 );
[ [ q8_M1*q8_M3, <identity ...> ], [ q8_M2*q8_M1, q8_M1*q8_M4 ], 
  [ q8_M2^2, q8_M1^2 ], [ q8_M2*q8_M3, q8_M1*q8_M2 ], 
  [ q8_M2*q8_M4, <identity ...> ], [ q8_M3*q8_M1, <identity ...> ], 
  [ q8_M3*q8_M2, q8_M1*q8_M4 ], [ q8_M3^2, q8_M1^2 ], 
  [ q8_M3*q8_M4, q8_M1*q8_M2 ], [ q8_M4*q8_M1, q8_M1*q8_M2 ], 
  [ q8_M4*q8_M2, <identity ...> ], [ q8_M4*q8_M3, q8_M1*q8_M4 ], 
  [ q8_M4^2, q8_M1^2 ], [ q8_M1^3, q8_M3 ], [ q8_M1^2*q8_M2, q8_M4 ], 
  [ q8_M1^2*q8_M4, q8_M2 ] ]
gap> Length( r2 );
16
gap> w2 := ReduceWordKB( w0, r2 );
q8_M1*q8_M4
]]>
</Example>

</Section>


<Section><Heading>Enumerating elements</Heading>

<ManSection>
   <Attr Name="ElementsOfMonoidPresentation"
         Arg="mon" />
<Description>
The function <C>ElementsOfMonoidPresentation</C> returns a list 
of normal forms for the elements of the group given by 
the monoid presentation <C>mon</C>. 
The normal forms are the least elements in each equivalence class 
(with respect to length-lex order).
<!-- The function <C>EnumerateKB</C> builds a catalogue of irreducible   -->
<!-- words in the generators of a monoid with respect to a set of rules. -->
When <C>rules</C> is a complete rewrite system for <C>G</C> 
the list returned is a set of normal forms for the group elements. 
For <C>q8</C> this list is 
<Display>
[\; {\rm id},\; a^+,\; b^+,\; a^-,\; b^-,\; a^{+2},\; a^+b^+,\; a^+b^-\; ]. 
</Display>
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> elq8 := Elements( q8 );
[ <identity ...>, f1, f1^3, f2, f1^2*f2, f1^2, f1*f2, f1^3*f2 ]
gap> elmonq8 := ElementsOfMonoidPresentation( monq8 );
[ <identity. ..>, q8_Ml, q8_M2, q8_M3, q8_M4, q8_Ml^2, q8_Ml*q8_M2, 
  q8_Ml*q8_M4 ]
]]>
</Example>
</Section>
</Chapter>