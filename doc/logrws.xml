<!-- ------------------------------------------------------------------- -->
<!--                                                                     -->
<!--  logrws.xml          IdRel documentation             Chris Wensley  -->
<!--                                                    & Anne Heyworth  -->
<!--                                                                     -->
<!-- ------------------------------------------------------------------- -->

<?xml version="1.0" encoding="UTF-8"?>

<Chapter Label="chap-logrws">
<Heading>Logged Rewriting Systems</Heading>

A <E>logged rewrite system</E> is associated with a group presentation. 
Each <E>logged rewrite rule</E> contains, 
in addition to the standard rewrite rule, 
a record or <E>log component</E> which expresses the rule in terms of 
the original relators of the group. 
We represent such a rule by a triple 
<C>[ u, [L1,L2,..,Lk], v]</C>, where <C>[u,v]</C> is a rewrite rule 
and <M>L_i = [n_i,w_i]</M> where <M>n_i</M> is a group relator 
and <M>w_i</M> is a word. 
These three components obey the identity 
<M>u = n_1^{w_1} \ldots n_k^{w_k} v</M>.
<P/>
Rules of the form <M>gG \to \rm{id}</M> apply to the monoid presentation, 
but not to the group presentation, so are given an empty logged component.


<Section><Heading>Logged Knuth-Bendix Completion</Heading>

The functions in this section are the logged versions of those in the 
previous chapter.

<ManSection>
   <Oper Name="LoggedOnePassKB"
         Arg="grp, loggedrules" />
<Description>
Given a logged rewrite system for the group <C>grp</C>, 
this function finds all the rules that would be added to complete 
the rewrite system of <C>OnePassKB</C> in <Ref Sect="one-pass-KB"/>, 
and also the logs which relate the new rules to the originals. 
The result of applying this function to <C>loggedrules</C> is to add 
new logged rules to the system without changing the monoid it defines.
<P/>
In the example, we first convert the presentation for <C>q8</C> 
into an initial set of logged rules, and then apply one pass of Knuth-Bendix. 
<P/>
The function returns a two-element list of lists. 
The first element is a set of logged rules and the second element 
is an empty list of r-sequences, which will be explained later. 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> l0 := ListWithIdenticalEntries( 8, 0 );;
gap> for j in [1..8] do
>        r := r0[j];;
>        if (j<5) then
>           l0[j] := [ r[1], [ [ j, id ] ], r[2] ];;
>        else
>           l0[j] := [ r[1], [ ], r[2] ];;
>        fi;
>    od;
gap> PrintLnUsingLabels( l0, genfgmon, q8labs ); 
[ [ a^4, [ [ 1, id ] ], id ], [ b^4, [ [ 2, id ] ], id ], [ a*b*a*B, 
[ [ 3, id ] ], id ], [ a^2*b^2, [ [ 4, id ] ], id ], [ a*A, 
[ ], id ], [ b*B, [ ], id ], [ A*a, [ ], id ], [ B*b, [ ], id ] ]
gap> l1 := LoggedOnePassKB( q8, l0 );;
gap> Length( l1[1] );
21
gap> PrintLnUsingLabels( l1[1][16], genfgmon, q8labs );
[ b^2, [ [ -4, id ], [ 2, A^2 ] ], a^2 ]
]]>
</Example>

Note that the length <M>21</M> of <C>l1</C> is, as expected, 
the same as that of <C>r1</C> in <Ref Sect="one-pass-KB"/>. 
If we write <M>a,b,A,B</M> for <C>M1,M2,M3,M4</C> 
and label the four original relators as 
<M>q=a^4,\ r=b^4,\ s=abaB,\ t=a^2b^2</M> 
then the sixteenth identity (for example) says that 
<M>b^2 = (t^{-1}r^{A^2})a^2</M>. 
To verify this, we may expand the right-hand side as follows: 
<Display>
(B^2A^2).a^2(b^4)A^2.a^2 
~=~ B^2(A^2a^2)b^4(A^2a^2) 
~=~ B^2b^4 
~=~ b^2. 
</Display>

<ManSection>
   <Oper Name="LoggedKnuthBendix"
         Arg="grp, loggedrules" />
   <Oper Name="LoggedRewriteReduce"
         Arg="grp, loggedrules" />
<Description>
The function <C>LoggedRewriteReduce</C> removes unnecessary rules 
from a logged rewrite system. 
It works on the same principle as <C>RewriteReduce</C> 
in <Ref Sect="one-pass-KB"/>.
<P/>
The function <C>LoggedKnuthBendix</C> repeatedly applies functions 
<C>LoggedOnePassKB</C> and <C>LoggedRewriteReduce</C> 
until no new rules are added and no unnecessary ones are included. 
The output is a reduced complete logged rewrite system.
<P/>
As a further example, consider the second rule in <C>l2</C> 
which shows how <M>ba</M> reduces to <M>aB</M>. 
For this rule <C>[u,L,v]</C> we will verify that 
<M>u = n_1^{w_1}n_2^{w_2}n_3^{w_3} v</M>, 
as in the introduction to this chapter. 
The rule is: 
<Display> 
[ ba, [ [3,a], [-1,id], [4,A] ], aB ]. 
</Display> 
The relators <M>3 \equiv s,\; 4 \equiv t</M> 
and the inverse relator <M>-1 \equiv q^{-1}</M> are 
<M>abaB,\; a^2b^2</M> and <M>A^4</M>, 
and these are conjugated by <M>a</M>, <M>A</M> 
and the identity respectively. 
So the second and third parts of the rule expand to:
<Display>
(A(abaB)a)(A^4)(a(a^2b^2)A)aB 
~=~ 
(Aa)ba(B(aA^4a^3)b)(b(Aa)B) 
</Display>
which reduces to the first part of the rule, <M>ba</M>. 
<P/>
In version 2.41 of this package the function <C>LoggedOnePassKB</C> 
was modified to return a two-element list of lists. 
The first element is a set of logged rules 
(as has been returned by earlier versions) 
while the second element is a list of <M>51</M> identities. 
See chapter <Ref Sect="chap-idrels"/> for more information about identities. 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> l11 := LoggedRewriteReduce( q8, l1[1] );;
gap> PrintUsingLabels( l11, genfgmon, q8labs );      
[ [ a*A, [ ], id ], [ b^2, [ [ -4, id ], [ 
2, A^2 ] ], a^2 ], [ b*B, [ ], id ], [ 
A*a, [ ], id ], [ B*b, [ ], id ], [ a^3, [ [ 1, id ] ], A ], [ a^2*b, [ [ 
4, id ] ], 
B ], [ a*b*a, [ [ 3, id ] ], b ], [ b*a*B, [ [ 3, a ] ], A ] ]
gap> Length( l11 );
9
gap> l2 := LoggedKnuthBendix( q8, l11 );;
gap> PrintUsingLabels( l2[1], genfgmon, q8labs );
gap> l11 := LoggedRewriteReduce( q8, l1[1] );;
gap> PrintLnUsingLabels( l11, genfgmon, q8labs );      
[ [ a*A, [ ], id ], [ b^2, [ [ -4, id ], [ 2, A^2 ] ], a^2 ], 
[ b*B, [ ], id ], [ A*a, [ ], id ], [ B*b, [ ], id ], [ a^3, 
[ [ 1, id ] ], A ], [ a^2*b, [ [ 4, id ] ], B ], [ a*b*a, [ 
[ 3, id ] ], b ], [ b*a*B, [ [ 3, a ] ], A ] ]
gap> Length( l11 );
9
gap> l2 := LoggedKnuthBendix( q8, l11 );;
gap> PrintLnUsingLabels( l2[1], genfgmon, q8labs );
[ [ a*A, [ ], id ], [ b*a, [ [ 3, a ], [ -1, id ], [ 4, A ] ], a*B ], 
[ b^2, [ [ -4, id ], [ 2, A^2 ] ], a^2 ], [ b*A, [ [ -3, id ] ], a*b ], 
[ b*B, [ ], id ], [ A*a, [ ], id ], [ A*b, [ [ -1, id ], [ 4, A ] ], a*B ], 
[ A^2, [ [ -1, id ] ], a^2 ], [ A*B, [ [ -1, id ], [ -2, A^2 ], 
[ 4, id ], [ 3, a*B ], [ -3, id ] ], a*b ], [ B*a, [ [ -4, id ], 
[ 3, A ] ], a*b ], [ B*b, [ ], id ], [ B*A, [ [ -3, a*b ] ], a*B ], 
[ B^2, [ [ -4, id ] ], a^2 ], [ a^3, [ [ 1, id ] ], A ], [ a^2*b, 
[ [ 4, id ] ], B ], [ a^2*B, [ [ -4, A^2 ], [ 1, id ] ], b ] ]
gap> Length( l2[1] );
16
gap> Length( l2[2] );
51
gap> Length( l2[1] );
16
gap> Length( l2[2] );
51
]]>
</Example>
</Section>


<Section><Heading>Logged reduction of a word</Heading>

<ManSection>
   <Oper Name="LoggedReduceWordKB"
         Arg="word, loggedrules" />
   <Oper Name="LoggedOnePassReduceWord"
         Arg="word, loggedrules" />
   <Oper Name="ShorterLoggedRule"
         Arg="logrule1, logrule2" />
<Description>
Given a word and a logged rewrite system, 
the function <C>LoggedOnePassReduceWord</C> makes one reduction pass 
of the word (possibly involving several reductions)
(as does <C>OnePassReduceWord</C> in <Ref Sect="one-pass-reduce"/>) 
and records this, using the log part of the rule(s) used 
and the position in the original word of the replaced part.
<P/>
The function <C>LoggedReduceWordKB</C> repeatedly applies 
<C>OnePassLoggedReduceWord</C> until the word can no longer be reduced. 
Each step of the reduction is logged, showing how the original word 
can be expressed in terms of the original relators and the irreducible word. 
When <C>loggedrules</C> is complete the reduced word is a unique normal form 
for that group element. 
The log of the reduction depends on the order in which the rules are applied. 
<P/>
The function <C>ShorterLoggedrule</C> decides whether one logged rule 
is better than another, using the same criteria as 
<C>ShorterRule</C> in <Ref Sect="one-pass-KB"/>.
In the example we perform logged reductions of <M>w_0 = a^9b^9</M> 
corresponding to the ordinary reductions performed in the 
previous chapter (section <Ref Sect="one-pass-reduce"/>). 
<P/>
In order to clarify the following output, note that, in the log below, 
<M>b^9a^9</M> reduces to <M>b^5a^5</M> in <C>lw1</C> 
and to <M>ba</M> in the first <C>lw2</C>. 
These expand to the initial <C>w0</C> using the given logged parts as follows: 
<Display>
(b^9a^4B^9)(b^4)b^5a^5 ~=~ b^9a^9 
~=~ (b^9a^4B^9)(b^4)(b^5a^4B^5)(b^4)ba\,.  
</Display> 
The corresponding expansion of the final <C>lw2</C> is too lengthy 
to include here. 
(It's hard to believe that the logged part of this identity 
is the simplest possible.  Further investigation is needed 
to determine whether or not this logged part can be simplified.) 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> PrintUsingLabels( w0, genfgmon, q8labs );   
b^9*a^9
gap> lw1 := LoggedOnePassReduceWord( w0, l0 );;
gap> PrintUsingLabels( lw1, genfgmon, q8labs );  
[ [ [ 1, b^-9 ], [ 2, id ] ], b^5*a^5 ]
gap> lw2 := LoggedReduceWordKB( w0, l0 );; 
gap> PrintUsingLabels( lw2, genfgmon, q8labs );
[ [ [ 1, b^-9 ], [ 2, id ], [ 1, b^-5 ], [ 2, id ] ], b*a ]
gap> lw2 := LoggedReduceWordKB( w0, l2[1] );;
gap> PrintUsingLabels( lw2, genfgmon, q8labs );
gap> PrintUsingLabels( w0, genfgmon, q8labs );   
b^9*a^9
gap> lw1 := LoggedOnePassReduceWord( w0, l0 );;
gap> PrintLnUsingLabels( lw1, genfgmon, q8labs );  
[ [ [ 1, b^-9 ], [ 2, id ] ], b^5*a^5 ]
gap> lw2 := LoggedReduceWordKB( w0, l0 );; 
gap> PrintLnUsingLabels( lw2, genfgmon, q8labs );
[ [ [ 1, b^-9 ], [ 2, id ], [ 1, b^-5 ], [ 2, id ] ], b*a ]
gap> lw2 := LoggedReduceWordKB( w0, l2[1] );;
gap> PrintLnUsingLabels( lw2, genfgmon, q8labs );
[ [ [ 3, a*b^-8 ], [ -1, b^-8 ], [ 4, A*b^-8 ], [ -4, id ], 
[ 2, A^2 ], [ -4, a^-1*b^-6*a^-2 ], [ 3, A*a^-1*b^-6*a^-2 ], 
[ 1, b^-1*a^-2*b^-6*a^-2 ], [ 4, id ], [ 3, a*b^-4*B^-1 ], 
[ -1, b^-4*B^-1 ], [ 4, A*b^-4*B^-1 ], [ -4, B^-1 ], [ 2, A^2*B^-1 ], 
[ -3, a^-1*B^-1*a^-1*b^-2*a^-2*B^-1 ], [ -4, id ], [ 3, A ], 
[ 1, b^-1*a^-2*B^-1*a^-1*b^-1*(b^-1*a^-1)^2 ], [ 4, 
B^-1*a^-1*b^-1*(b^-1*a^-1)^2 ], [ 3, id ], [ -1, a^-1 ], [ 4, A*a^-1 ], 
[ -4, B^-1*a^-2 ], [ 2, A^2*B^-1*a^-2 ], [ -4, a^-2 ], [ 3, A*a^-2 ], 
[ -4, a^-2*b^-1*a^-3 ], [ 1, id ], [ 3, a*A^-1 ], [ -1, A^-1 ], 
[ 4, id ], [ -4, id ], [ 3, A ], [ 3, id ], [ -1, a^-1 ], 
[ 4, A*a^-1 ], [ -4, a^-2 ], [ 3, A*a^-2 ], [ 1, id ], [ -1, id ], 
[ 4, A ] ], a*B ]
]]>
</Example>

<ManSection>
   <Attr Name="LoggedRewritingSystemFpGroup"
         Arg="grp" />
<Description>
Given a group presentation, the function <C>LoggedRewritingSystemFpGroup</C> 
determines a logged rewrite system based on the relators. 
The initial logged rewrite system associated with a group presentation 
consists of two types of rule. 
These are logged versions of the two types of rule in the monoid presentation.
Corresponding to the j-th relator <C>rel</C> of the group 
there is a logged rule <C>[rel,[[j,id]],id]</C>. 
For each inverse relator there is a logged rule <C>[ gen*inv, [], id ]</C>. 
The function then attempts a completion of the logged rewrite system. 
The rules in the final system are partially ordered by the function 
<C>ShorterLoggedRule</C>.
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> lrws := LoggedRewritingSystemFpGroup( q8 );;
gap> PrintLnUsingLabels( lrws, genfgmon, q8labs );
[ [ B*b, [ ], id ], [ A*a, [ ], id ], [ b*B, [ ], id ], [ a*A, 
[ ], id ], [ a^2*B, [ [ -8, A^2 ], [ 5, id ] ], b ], [ a^2*b, 
[ [ 8, id ] ], B ], [ a^3, [ [ 5, id ] ], A ], [ B^2, [ [ -8, id ] ], a^2 ], 
[ B*A, [ [ -7, a*b ] ], a*B ], [ B*a, [ [ -8, id ], [ 7, A ] ], a*b ], 
[ A*B, [ [ -5, id ], [ -6, A^2 ], [ 8, id ], [ 7, a*B ], [ -7, id ] ], 
a*b ], [ A^2, [ [ -5, id ] ], a^2 ], [ A*b, [ [ -5, id ], [ 8, A ] ], a*B ], 
[ b*A, [ [ -7, id ] ], a*b ], [ b^2, [ [ -8, id ], [ 6, A^2 ] ], a^2 ], 
[ b*a, [ [ 7, a ], [ -5, id ], [ 8, A ] ], a*B ] ]
gap> Length( lrws );
16
]]>
</Example>

<P/>
Consider now the two-generator abelian group <M>T</M> considered in the 
previous chapter (<Ref Sect="rwsfp"/>). 
Using the alternative ordering on the monoid generators, 
<C>[ T_M1</C><M>=a</M>, <C>T_M2</C><M>=A</M>, 
<C>T_M3</C><M>=b</M>, <C>T_M4</C><M>=B</M> <C>]</C>, 
we obtain the following set of <M>8</M> logged rules. 
The last of these may be checked as follows: 
<Display>
(ba(BAba)AB)ab ~=~ ba(B(A(b(aA)B)a)b) 
</Display>
and is a logged version of the rule <M>ba \to ab</M>. 
<P/> 
<Example>
<![CDATA[
gap> lrwsT := LoggedRewritingSystemFpGroup( T );;
gap> PrintLnUsingLabels( lrwsT, genfgmonT, Tlabs );
[ [ Y*y, [ ], id ], [ y*Y, [ ], id ], [ X*x, [ ], id ], [ x*X, 
[ ], id ], [ Y*X, [ [ -5, id ] ], X*Y ], [ Y*x, [ [ 5, X ] ], x*Y ], 
[ y*X, [ [ 5, Y ] ], X*y ], [ y*x, [ [ -5, X*Y ] ], x*y ] ]
]]>
</Example>

</Section>
</Chapter>